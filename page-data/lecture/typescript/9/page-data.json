{
    "componentChunkName": "component---src-components-lecture-page-layout-js",
    "path": "/lecture/typescript/9",
    "result": {"data":{"mdx":{"id":"e0864589-f5f5-5e56-891e-73bd717f0efe","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Typescript Ãœberblick\",\n  \"date\": \"2023-12-19T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"JavaScript\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Programmiersprache f\\xFCr Webseiten (Nutzerinteraktion, Seite anpassen, Daten laden); 1995 entwickelt von Brendan Eich\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Skriptsprache, nicht zuerst kompiliert (in Maschinensprache \\xFCbersetzt) sondern direkt interpretiert\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"kann im Browser ausgef\\xFChrt werden, aber auch serverseitig nutzbar (NodeJS)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JavaScript Engine: Programm, welches JavaScript Code ausf\\xFChren kann; z. B. \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://v8.dev/\"\n  }, \"V8\"), \" f\\xFCr Chrome, Spydermonkey f\\xFCr Firefox, JavaScriptCore f\\xFCr Safari\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"keine direkte Verwandtschaft mit Java, aber \\xE4hnliche Syntax und Name wegen Javas damaliger Popularit\\xE4t\", mdx(\"sup\", {\n    parentName: \"li\",\n    \"id\": \"fnref-scheme\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-scheme\",\n    \"className\": \"footnote-ref\"\n  }, \"scheme\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Standard: ECMAScript (European Computer Manufacturers Association), JavaScript ist die (verz\\xF6gerte) Umsetzung des Standards\", mdx(\"sup\", {\n    parentName: \"li\",\n    \"id\": \"fnref-babel\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-babel\",\n    \"className\": \"footnote-ref\"\n  }, \"babel\")))), mdx(\"h3\", null, \"JavaScript Code in HTML einbinden\"), mdx(\"p\", null, \"\\xDCber das \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<script>\"), \" HTML Element:\", mdx(\"sup\", {\n    parentName: \"p\",\n    \"id\": \"fnref-mimetype\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-mimetype\",\n    \"className\": \"footnote-ref\"\n  }, \"mimetype\"))), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Code direkt in die HTML Datei mit einf\\xFCgen\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"bezieht sich nur auf die Seite in der es eingebunden ist\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"nicht f\\xFCr seiten\\xFCbergreifenden Code geeignet\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"wird meist im \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"head\"), \" verwendet\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"sollte nur im Ausnahmefall verwendet werden\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<!DOCTYPE html>\\n<html lang=\\\"de\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <title>Titel der Seite</title>\\n    <script>\\n      console.log(\\\"Hallo\\\");\\n    </script>\\n  </head>\\n  <body>\\n    <p>Text</p>\\n  </body>\\n</html>\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Im head Element, zentrale JS Datei/en f\\xFCr einzelne Seite laden\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"src Attribut mit Pfad zur externen JS Datei\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"kann in jeder Seite eingebunden werden\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"aller Code zentral verwaltet\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\xFCbliche Vorgehensweise\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"wird meist im \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"head\"), \" eingebunden (m\\xF6glichst schnell anfangen zu laden)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Scripte laden parallel zum Seitenaufbau mit einem der beiden booleschen Attribute\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"async: f\\xFChrt das Script aus, sobald es geladen wurde\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"defer: f\\xFChrt das Script aus, nachdem die Seite aufgebaut wurde (stellt Zugriff auf DOM Elemente im Script sicher)\", mdx(\"sup\", {\n    parentName: \"li\",\n    \"id\": \"fnref-onloadevent\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-onloadevent\",\n    \"className\": \"footnote-ref\"\n  }, \"onloadevent\")))))), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<!DOCTYPE html>\\n<html lang=\\\"de\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <title>Titel der Seite</title>\\n    <base href=\\\"https://webuser.hs-furtwangen.de/~heintzs/gis/\\\" />\\n    <link rel=\\\"stylesheet\\\" href=\\\"styles.css\\\" />\\n    <script src=\\\"script.js\\\" defer></script>\\n  </head>\\n  <body>\\n    <p>Text</p>\\n  </body>\\n</html>\\n\")))), mdx(\"h1\", null, \"TypeScript\"), mdx(\"p\", null, \"JavaScript...\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"wird nicht kompiliert und damit auch nicht auf Plausibilit\\xE4t \\xFCberpr\\xFCft\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"hat dynamische Typisierung (Datentyp wird ermittelt und ist nicht fest)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"wurde sehr schnell entwickelt\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Fehler oft erst zur Laufzeit erkannt\")), mdx(\"p\", null, \"Typescript...\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Superset von JavaScript (JavaScript Code zul\\xE4ssig, aber bietet mehr); entwickelt von Microsoft\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"m\\xF6glichst viele Fehler vor der Laufzeit finden (static type checking)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"statische Typisierung (Datentypen fix)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"wird in JavaScript kompiliert (\\xFCbersetzt)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mehr \\xC4hnlichkeit mit Java\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.typescriptlang.org/docs/handbook/typescript-tooling-in-5-minutes.html\"\n  }, \"Typescript verwenden\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"kann nicht direkt vom Browser interpretiert werden\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"muss zum Ausf\\xFChren in JavaScript kompiliert werden\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"wird daher nicht direkt im HTML Code eingebunden, sonder die kompilierte JS Datei\")), mdx(\"p\", null, \"Typescript Compiler (auf Kommandozeile):\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Installieren (einmalig):\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"npm install -g typescript\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Kompilieren (bei jeder Code \\xC4nderung):\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"tsc filename.ts\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"-> filename.js (oder Fehlerreport)\"))), mdx(\"p\", null, \"Konfiguration des Compilers:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\"\n  }, \"tsconfig.json Datei\"), \" im Basis Verzeichnis des Projekts\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"z. B. zum Erzeugen einer Sourcemap (filename.js.map), die den ts Code zum js Code mapped (erleichtert Fehlersuche)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Default tsconfig.json erstellen mit haupts\\xE4chlich auskommentierten Einstellungen:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"tsc --init\\n\")))), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://eslint.org/\"\n  }, \"eslint\"), \":\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Lint (engl. Fussel): Code Analyse-Tool\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Plugin f\\xFCr Editor (z. B. VS Code)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"bietet weitere statische Fehler\\xFCberpr\\xFCfungen (beim Code schreiben, vor dem Kompilieren)\")), mdx(\"h2\", null, \"Variablen deklarieren\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"let x: number = 0; // let varName: Datentyp = Value;\\n\\n// ohne sofortige Wertzuweisung\\nlet y: boolean;\\nconsole.log(y);\\ny = true;\\nconsole.log(y);\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"let x = 0; // Keine Typbindung\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"int x = 0;\\n\")), mdx(\"h3\", null, \"Basis-Datentypen in TypeScript\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Datentype\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Werte\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Java\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"string\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Zeichenketten\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"char, String\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"number\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Zahlen\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"int, float, double, ...\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Wahrheitwerte\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"boolean\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"any\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Alle (default Datentyp, nicht verwenden)\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"-\")))), mdx(\"p\", null, \"Basis-Datentypen klein schreiben\"), mdx(\"h3\", null, \"Konstanten\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"const z: number = 4.2;\\nconsole.log(z);\\nz = 1.0; // FEHLER!\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"final double Z = 4.2;\\n\")), mdx(\"h3\", null, \"var nicht verwenden\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"let\"), \" gilt nur im G\\xFCltigkeitsbereich (Block in dem es deklariert wurde, wie bei Java)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"var\"), \" gilt \\xFCberall, egal wo und wann die Variable deklariert wurde\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"var\"), \" erlaubt es die gleiche Variable mehrfach zu deklarieren\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"var\"), \" f\\xFChrt schnell zu Fehlern oder unerwartetem Verhalten\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"if (true) {\\n  var i = 20;\\n}\\nconsole.log(i);\\n\")), mdx(\"h2\", null, \"Arrays und Strings\"), mdx(\"h3\", null, \"Array\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"let x: number[] = [1, 2, 3];\\nconsole.log(x[1]);\\n\")), mdx(\"p\", null, mdx(\"sup\", {\n    parentName: \"p\",\n    \"id\": \"fnref-arrayalternativ\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-arrayalternativ\",\n    \"className\": \"footnote-ref\"\n  }, \"arrayalternativ\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"int[] x = {1, 2, 3};\\n\")), mdx(\"h4\", null, \"Array L\\xE4nge\"), mdx(\"p\", null, \"Anders als in Java k\\xF6nnen Arrays erweitert werden und haben keine feste L\\xE4nge nach dem Anlegen.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"let x: number[] = [];\\nx[0] = \\\"Apfel\\\";\\nx[3] = \\\"Banane\\\";\\nconsole.log(x);\\n\")), mdx(\"p\", null, \"L\\xE4nge bestimmen mit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".length\"), \" (wie in Java)\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"let x: number[] = [1, 2, 3];\\nconsole.log(x.length); // L\\xE4nge des Arrays\\nconsole.log([\\\"a\\\", \\\"b\\\"].length);\\n\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.w3schools.com/jsref/jsref_obj_array.asp\"\n  }, \"Array Methoden\")), mdx(\"h3\", null, \"Template-Strings\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ausdr\\xFCcke direkt in einen String einbetten\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"String Wert mit Back-Ticks \", \"`\", \" \", \"`\", \" umschlie\\xDFen (statt \\\" \\\")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ausdr\\xFCcke mit \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"${ausdruck}\"), \" einbetten\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"let wort = \\\"Template-String\\\";\\nconsole.log(`Dies ist ein ${wort} mit einem Ausdruck: 5 > 2 = ${5 > 2}`);\\n\")), mdx(\"p\", null, \"Strings aufaddieren (wie in Java) ist ebenfalls m\\xF6glich.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.w3schools.com/jsref/jsref_obj_string.asp\"\n  }, \"String Methoden\")), mdx(\"h2\", null, \"Operatoren\"), mdx(\"p\", null, \"wie in Java (au\\xDFer fett gedruckte)\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Operator\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Bedeutung\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"()\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Klammerung\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"++\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"--\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Increment, Decrement (+1, -1)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"!\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Negierung\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"+\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"-\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Vorzeichen\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"**\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"Potenzierung\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"*\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"/\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"%\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Multiplikation, Division, Modulo (Rest bei Division)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"+\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"-\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Addition, Subtraktion\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \">\"), \" , \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \">=\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"<\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"<=\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Gr\\xF6\\xDFer, Gr\\xF6\\xDFer gleich, Kleiner, Kleiner gleich\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"==\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"!=\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Ist gleich, ist nicht gleich\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"===\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"!==\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"Strikte Gleichheit\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"&&\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Logisches Und\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\\|\\\\| \")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Logisches Oder\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"? :\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Bedingte Auswertung\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"=\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Zuweisung\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"+=\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"-=\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"*=\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"/=\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"%=\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"**=\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Kombinierte Zuweisung\")))), mdx(\"p\", null, \"geordnet nach \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\"\n  }, \"Priorisierung\")), mdx(\"h3\", null, \"Strikte Gleichheit\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"console.log(5 == \\\"5\\\"); // Gleichheit des Wertes gepr\\xFCft, Typ wird implizit konvertiert (hier: true)\\nconsole.log(5 === \\\"5\\\"); // Gleichheit von Wert und Typ gepr\\xFCft (hier: false, da number != string)\\n\")), mdx(\"h3\", null, \"Typkonvertierungen\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"implizite Konvertierung: Datentypen werden wenn n\\xF6tig versucht passend zu konvertieren (vermeiden!)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"explizite Konvertierung, z. B. \\xFCber Konstruktor:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"String(wert)\"), \": Wert zu String konvertieren\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Number(wert)\"), \": Wert zu Zahl konvertieren\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-assertions\"\n  }, \"Type Assertions\"), \": Konvertierung in einen mehr spezifischen Typ (z. B. bei Vererbung von Elterntyp zu Kindtyp)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"referenzName as Kindtyp\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<Kindtyp>referenzName\"))))), mdx(\"h2\", null, \"Bedingungen\"), mdx(\"p\", null, \"wie in Java\"), mdx(\"h3\", null, \"if-else Anweisung\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"if (2 > 5) {\\n  console.log(\\\"wahr\\\");\\n} else {\\n  console.log(\\\"falsch\\\");\\n}\\n\")), mdx(\"h3\", null, \"Bedingte Anweisung\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"console.log(2 > 5 ? \\\"wahr\\\" : \\\"falsch\\\");\\n\")), mdx(\"h3\", null, \"switch-case Anweisung\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"let day: string = \\\"Sonntag\\\";\\nswitch (day) {\\n  case \\\"Samstag\\\":\\n  case \\\"Sonntag\\\": {\\n    console.log(\\\"Wochenende\\\");\\n    break;\\n  }\\n  default: {\\n    console.log(\\\"Kein Wochenende\\\");\\n    break;\\n  }\\n}\\n\")), mdx(\"h2\", null, \"Schleifen\"), mdx(\"p\", null, \"wie in Java (bis auf foreach)\"), mdx(\"h3\", null, \"while-Schleife\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// while-Schleife\\nlet i: number = 5;\\nwhile (i > 0) {\\n  console.log(i);\\n  i--;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// do-while-Schleife\\nlet i: number = -3;\\ndo {\\n  console.log(i);\\n  i--;\\n} while (i > 0);\\n\")), mdx(\"h3\", null, \"for-Schleife\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// for-Schleife\\nfor (let i: number = 0; i < 10; i++) {\\n  console.log(i);\\n}\\n\")), mdx(\"h3\", null, \"foreach-Schleife\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"// foreach-Schleife\\nfor (let i in \\\"test\\\") {\\n  console.log(i); // gibt den Key aus (hier Position)\\n}\\n\\nfor (let i of \\\"test\\\") {\\n  console.log(i); // gibt den Wert aus\\n}\\n\\n// 0 1 2 3\\n// t e s t\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"for (char c : \\\"test\\\".toCharArray()){\\n  System.out.println(c); // gibt den Wert aus\\n}\\n\")), mdx(\"h3\", null, \"Schleifen Anweisungen\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"continue\"), \": Weiter mit dem n\\xE4chsten Schleifendurchlauf\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"break\"), \": Schleife beenden\")), mdx(\"h2\", null, \"Funktionen\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"function add(a: number, b: number): number {\\n  return a + b;\\n}\\n\\nconsole.log(add(1, 2));\\ngreetings();\\n\\nfunction greetings(): void {\\n  console.log(\\\"Hallo\\\");\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"public int add(int a, int b){\\n  return a + b;\\n}\\n\")), mdx(\"p\", null, \"Default Werte f\\xFCr die \\xDCbergabe definieren:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"function greetings(word: string = \\\"Hallo\\\"): void {\\n  console.log(word);\\n}\\ngreetings(); // Ausgabe: Hallo\\ngreetings(\\\"Hi\\\"); // Ausgabe: Hi\\n\")), mdx(\"h2\", null, \"Objektorientierung\"), mdx(\"h3\", null, \"Klassen und Objekte\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"class Person {\\n  // Attribute (optional)\\n  private name: string;\\n  private alter: number = 0; // default Wert\\n\\n  //Konstruktor\\n  constructor(name: string) {\\n    this.name = name;\\n  }\\n\\n  geburtstag(): void {\\n    this.alter++;\\n  }\\n\\n  show(): string {\\n    return `${this.name} ist ${this.alter} Jahre alt.`;\\n  }\\n}\\n\\nlet p: Person = new Person(\\\"Kim\\\");\\np.geburtstag();\\nconsole.log(p.show());\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, \"class Person {\\n  private String name;\\n  private int alter = 0;\\n\\n  Person(String name) {\\n    this.name = name;\\n  }\\n\\n  public void geburtstag(){\\n    alter++;\\n  }\\n\\n  public String show(){\\n    return name + \\\" ist \\\" + alter + \\\" Jahre alt.\\\"\\n  }\\n}\\n\\nPerson p = new Person(\\\"Kim\\\");\\np.geburtstag();\\nSystem.out.println(p.show());\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Hinweis: kein \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"let\"), \" vor den Attributen, kein \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"function\"), \" vor den Methoden\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"readonly\"), \" vor Variable f\\xFCr \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Konstante Attribute\"), \" (nicht mit \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"const\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"public\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"protected\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"private\"), \" wie in Java f\\xFCr \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Sichtbarkeit/Kapselung\"), \"; public ist default \", mdx(\"sup\", {\n    parentName: \"li\",\n    \"id\": \"fnref-privatejavascript\"\n  }, mdx(\"a\", {\n    parentName: \"sup\",\n    \"href\": \"#fn-privatejavascript\",\n    \"className\": \"footnote-ref\"\n  }, \"privatejavascript\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"static\"), \" wie in Java f\\xFCr statische Attribute/Methoden (f\\xFCr Attribute/Methoden, die sich alle Objekte teilen)\")), mdx(\"h3\", null, \"Vererbung\"), mdx(\"p\", null, \"wie in Java\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"extends\"), \": Erben von (genau einer) anderen Klasse (alle Attribute und Methoden werden vererbt)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"super\"), \": Aufruf des Konstruktors der Basisklasse\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"abstract\"), \": Klasse von der kein Objekt angelegt werden kann (dient nur als Basisklasse zur Vererbung)\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-ts\"\n  }, \"class Punkte {\\n  private punkte: number = 0;\\n}\\n\\nclass Highscore extends Punkte {\\n  private readonly name: string;\\n  constructor(name) {\\n    super();\\n    this.name = name;\\n    console.log(`${name} hat ${this.punkte} Punkte`);\\n  }\\n}\\n\\nlet h: Highscore = new Highscore(\\\"Winner\\\");\\n\")), mdx(\"h1\", null, \"Linksammlung\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.typescriptlang.org/docs/handbook\"\n  }, \"https://www.typescriptlang.org/docs/handbook\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.tutorialsteacher.com/typescript\"\n  }, \"https://www.tutorialsteacher.com/typescript\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://learning.oreilly.com/library/view/mastering-typescript-/9781800564732/?ar=#toc\"\n  }, \"https://learning.oreilly.com/library/view/mastering-typescript-/9781800564732/?ar=#toc\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://learning.oreilly.com/library/view/essential-typescript-4/9781484270110/?ar#toc\"\n  }, \"https://learning.oreilly.com/library/view/essential-typescript-4/9781484270110/?ar#toc\")), mdx(\"h3\", null, \"JavaScript\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://learning.oreilly.com/library/view/javascript-2nd-edition/9781098124069/Text/Contents02_9783960889120.xhtml\"\n  }, \"https://learning.oreilly.com/library/view/javascript-2nd-edition/9781098124069/Text/Contents02_9783960889120.xhtml\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://auth0.com/blog/a-brief-history-of-javascript/\"\n  }, \"https://auth0.com/blog/a-brief-history-of-javascript/\")), mdx(\"h3\", null, \"ECMAScript\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.freecodecamp.org/news/whats-the-difference-between-javascript-and-ecmascript-cba48c73a2b5/\"\n  }, \"https://www.freecodecamp.org/news/whats-the-difference-between-javascript-and-ecmascript-cba48c73a2b5/\")), mdx(\"div\", {\n    \"className\": \"footnotes\"\n  }, mdx(\"hr\", {\n    parentName: \"div\"\n  }), mdx(\"ol\", {\n    parentName: \"div\"\n  }, mdx(\"li\", {\n    parentName: \"ol\",\n    \"id\": \"fn-scheme\"\n  }, \"Konzepte von Programmiersprachen \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Scheme\"), \" und \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Self\"), \"; urspr\\xFCnglicher Name war \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Mocha\"), \", bzw. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"LiveScript\"), \"; umbenannt wegen Kooperation zwischen Netscape und Sun\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fnref-scheme\",\n    \"className\": \"footnote-backref\"\n  }, \"\\u21A9\")), mdx(\"li\", {\n    parentName: \"ol\",\n    \"id\": \"fn-babel\"\n  }, \"Babel (\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://babeljs.io/\"\n  }, \"https://babeljs.io/\"), \") erlaubt es JavaScript Code in \\xE4ltere Versionen zu \\xFCbersetzen, welche \\xE4ltere Browserversionen interpretieren k\\xF6nnen\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fnref-babel\",\n    \"className\": \"footnote-backref\"\n  }, \"\\u21A9\")), mdx(\"li\", {\n    parentName: \"ol\",\n    \"id\": \"fn-mimetype\"\n  }, \"Vor HTML 5 zus\\xE4tzlich mit Angabe des MIME Type (Internet Media Type) \\xFCber das Attribut \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"type=\\\"text/javascript\\\"\"), mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fnref-mimetype\",\n    \"className\": \"footnote-backref\"\n  }, \"\\u21A9\")), mdx(\"li\", {\n    parentName: \"ol\",\n    \"id\": \"fn-onloadevent\"\n  }, \"Alternativ kann ein onLoad Event im Script verwendet werden.\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fnref-onloadevent\",\n    \"className\": \"footnote-backref\"\n  }, \"\\u21A9\")), mdx(\"li\", {\n    parentName: \"ol\",\n    \"id\": \"fn-arrayalternativ\"\n  }, \"Alternative Schreibweise (als Generic): \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"let x: Array<number> = [1, 2, 3];\"), mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fnref-arrayalternativ\",\n    \"className\": \"footnote-backref\"\n  }, \"\\u21A9\")), mdx(\"li\", {\n    parentName: \"ol\",\n    \"id\": \"fn-privatejavascript\"\n  }, \"In JavaScript gibt es die Bezeichner \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"public\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"protected\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"private\"), \" nicht, allerdings k\\xF6nnen \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"private\"), \" Eigenschaften durch ein \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"#\"), \" vor dem Namen gekennzeichnet werden, z. B. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"#name\"), \" oder \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"#verborgeneMethode()\"), mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#fnref-privatejavascript\",\n    \"className\": \"footnote-backref\"\n  }, \"\\u21A9\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Typescript Ãœberblick","date":"19. Dezember 2023"}}},"pageContext":{"id":"e0864589-f5f5-5e56-891e-73bd717f0efe","heading":{"value":"Objektorientierung","depth":2},"index":9,"prevSlug":"/lecture/typescript/8","nextSlug":"/lecture/typescript/10"}},
    "staticQueryHashes": ["170874137"]}